# 再読み込み$
# tmux source path/to/.tmux.conf
# pluginのインスコ・アプデ
# <prefix>+I/U

## ---------------------------------------------------
## plug-in
## ---------------------------------------------------
set -g @plugin 'tmux-plugins/tpm'

# キーバインドで簡単に環境の保存/復元をする
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'  # ペインの内容を保存・リストアする(default-commandに`||`や`&&`を含めないこと)
set -g @resurrect-processes ''   # 復活させるプロセスの設定 sshやphp, mysqlなど
set -g @resurrect-strategy-nvim 'session'     # Session.vimが存在すればnvimセッションをrestoreする

# tmux-resurrentを自動化
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-save-interval '15'
set -g @continuum-restore 'on'

# 正規表現での検索, 定義済み検索
set -g @plugin 'tmux-plugins/tmux-copycat'

# コピペ便利ツール
set -g @plugin 'tmux-plugins/tmux-yank'

set -g @plugin 'tmux-plugins/tmux-battery'

set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @cpu_low_fg_color "#[fg=#3d541b]" # foreground color when cpu is low
set -g @cpu_medium_fg_color "#[fg=#54461b]" # foreground color when cpu is medium
set -g @cpu_high_fg_color "#[fg=#541f1b]" # foreground color when cpu is high

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'


## ---------------------------------------------------
## color scheme
## ---------------------------------------------------
# 256色表示
set -g default-terminal 'xterm-256color'
set -ga terminal-overrides ',xterm-256color:Tc'

colour_process='#333a52'
colour_primary_text='#566573'
colour_secondary_text='#566573'
colour_clock_text='#c6c6c6'
colour_clock='#333a52'
colour_status_bar='#0f1117'
colour_border_inactive='#303030'
colour_border_active='#5294e2'
colour_tab_activity='#c17979'
colour_tab_activity_text='#222222'
colour_tab_active='#799dc1'
colour_tab_active_text='#222222'


## ----------------------------------------------------
## theme
## ----------------------------------------------------
# ステータスバーをトップに配置する
set-option -g status-position top

# Plugins
## Online status
set -g @online_icon "#[fg=#73d216]✔"
set -g @offline_icon "#[fg=#fc4138]✘"

## Prefix indicator
set -g @prefix_highlight_bg "$colour_tab_active"
set -g @prefix_highlight_fg "$colour_tab_active_text bold"

## Status
set -g status-left ""
### Fancy Font
set -g status-right "#{prefix_highlight}#[fg=$colour_process]| #{pane_current_command} | #[fg=$colour_primary_text] #S:#I.#P  #($HOME/.config/tmux/bin/uptime.sh) #[fg=$colour_primary_text] #{cpu_fg_color}#{cpu_percentage} #[fg=$colour_primary_text] #($HOME/.config/tmux/bin/mem-usage.sh) #[fg=$colour_primary_text]#{battery_icon} #{battery_percentage} #{battery_remain} #[fg=$colour_clock_text bg=$colour_clock]  %H:%M "
### For none fancy font replace icons with text or colour each segment differently
set -g status-right-length 70
set -g status-justify left
set -g status-style "fg=$colour_primary_text bg=$colour_status_bar"
## Panes
set -g pane-active-border-style "fg=$colour_border_active bg=default"
set -g pane-border-style "fg=$colour_border_inactive bg=default"
setw -g pane-border-status bottom
setw -g pane-border-format " #I.#P #($HOME/.config/tmux/bin/pane-status.sh #{pane_current_command} #{pane_pid} #{pane_current_path}) "
## Window
setw -g window-status-format "#[fg=$colour_secondary_text bg=$colour_status_bar]#{?window_activity_flag,#[fg=$colour_tab_activity_text bg=$colour_tab_activity],} #I #W #{?window_bell_flag,,}#{?window_content_flag,,}#{?window_silence_flag,,}#{?window_last_flag,,}"
setw -g window-status-current-format "#[bg=$colour_tab_active fg=$colour_tab_active_text bold] #I #W "
setw -g window-status-bell-style "fg=$colour_tab_activity_text bg=$colour_tab_activity bold"
setw -g window-status-activity-style "fg=$colour_tab_activity_text bg=$colour_tab_activity bold"
set -g window-status-separator '' # Remove space between windows in status bar
## Messaging
set -g message-style "fg=$colour_primary_text bg=$colour_status_bar bright"


## ---------------------------------------------------
## screen saver
## ---------------------------------------------------
set -g lock-after-time 300
set -g lock-command "unimatrix"
bind l lock-client
bind L lock-session


## ---------------------------------------------------
## general
## ---------------------------------------------------

# repeat-timeミリ秒の間，2度目以降はprefixを入力せず連続して操作できる
set -g repeat-time 2000

# メッセージ表示時間
set -g display-time 2000
set -g display-panes-time 2000

# フォーカス
set -g focus-events on

# 自動的にzshでrenameされるのを防ぐ
set -g allow-rename off
set -g set-titles on
set -g set-titles-string "#T"

# 履歴
set -g history-limit 10000

# Escキーの遅延を解消
set -s escape-time 0

# ウィンドウのインデックスを1から始める
set -g base-index 1

# ペインのインデックスを1から始める
setw -g pane-base-index 1

# ウィンドウを閉じたときにインデックス番号を詰める
set -g renumber-windows on

# マウス操作を有効にする
set-option -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# ステータスバーを1秒毎に描写し直す
set -g status-interval 1

# ウィンドウで動作があるとステータスラインでハイライト
setw -g monitor-activity on
set -g visual-activity off   # monitor-activity=onのときステータスラインメッセージを表示

# アクティブなペインのみ白っぽく変更（真っ黒は232）
#set -g window-style 'bg=colour239'
#set -g window-active-style 'bg=colour234'


## ----------------------------------------------------
## key binding
## ----------------------------------------------------
# prefixキーをC-qに変更
set -g prefix C-q
bind C-q send-prefix
# C-bのキーバインドを解除 (<C-b>はvimと干渉する)
unbind C-b

### util
# ターミナルに表示されたものをそのままロギング
bind H pipe-pane -o "cat >> $HOME/.tmux/tmux-#W.log" \; display "Toggled logging to $HOME/.tmux/tmux-#M.log"
bind h pipe-pane \; display-message 'Suspended logging to $HOME/.tmux/tmux-#W.log'
# 現在のセッションを終了
bind k kill-session
# tmux全体を終了
bind K kill-server

### ペイン操作
# ペイン分割
bind -n  M-- split-window -vc "#{pane_current_path}"
bind -n 'M-\' split-window -hc "#{pane_current_path}"

# ペイン移動
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# vimのキーバインドでペインをリサイズする
bind -r M-H resize-pane -L 5
bind -r M-J resize-pane -D 5
bind -r M-K resize-pane -U 5
bind -r M-L resize-pane -R 5

# Maximize and minimize pane support
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp


### ウィンドウ操作
# 新規ウィンドウ作成
bind -n M-c new-window -c "#{pane_current_path}"
# ウィンドウ移動
bind -n M-T previous-window
bind -n M-t next-window


### セッション操作
# セッション選択一覧
bind -n M-s choose-session


### コピーモード
# コピーモードでvimキーバインドを使う
setw -g mode-keys vi
# 'v' で選択を始める
bind -T copy-mode-vi v send -X begin-selection
# 'V' で行選択
bind -T copy-mode-vi V send -X select-line
# 'C-v' で矩形選択
bind -T copy-mode-vi C-v send -X rectangle-toggle
# 'y' でヤンク
bind -T copy-mode-vi y send -X copy-selection
# 'Y' で行ヤンク
bind -T copy-mode-vi Y send -X copy-line
# 'C-p'でペースト
bind-key C-p paste-buffer

# microsoft以外ではxclipでクリップボードを共有(macのときは知らん)
if "uname --kernel-release | grep 'microsoft'" "" "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -i -sel clip > /dev/null'"
if "uname --kernel-release | grep 'microsoft'" "" "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -i -sel clip > /dev/null'"


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'

